There are main 3 types of desing pattern
1.Creational (mainly realted to object creational helper)
2.Structural 
3.Behavioural patterns

23 different types of design pattern commonly used in javascript

1.Module Pattern 
Purpose: 
Encapsulates private variables and functions within a single object, revealing only a public API
Helps in organizing code, avoiding global scope pollution, and getting data privacy 

2.Revealing Module Pattern 
Purpose: 
Similar to the Module Pattern but explicitly reveals methods and properties.
Offers better clarity on which variables and functions are publicly accessible.

3.Singleton Pattern
Purpose: 
Ensures a class has only one instance and provides a global point of access to it.
Useful when exactly one object is needed to coordinate actions across the system.

4.Factory Pattern 
Purpose: 
Provides an interface for creating objects in a superclass but allows subclasses to alter the type of objects that will be created.
Decouples object creation from its implementation, making the code more flexible and scalable.

5.Observer Pattern
Purpose: 
Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
Promotes loose coupling between the components and is essential in event-driven architectures.

6.Decorator Pattern
Purpose: 
Adds behavior to individual objects, dynamically, without affecting the behavior of other objects from the same class.
Enhances or overrides the behavior of objects at runtime, adding flexibility in code extension.

7.Proxy Pattern 
Purpose: Provides a surrogate or placeholder for another object to control access to it.
Useful for lazy initialization, logging, access control, and smart references.

8.Stratgey Pattern 
Purpose: 
Defines a family of algorithms, encapsulates each one, and makes them interchangeable.
Allows the algorithm to vary independently from clients that use it, promoting flexibility and reusability.

9.Command Pattern 
Purpose: 
Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.
Decouples the sender and receiver of a request, allowing for more flexible and reusable code.

10.Mediator Pattern 
Purpose: 
Defines an object that encapsulates how a set of objects interact.
Promotes loose coupling by preventing objects from referring to each other explicitly.

11.Iterator Pattern 
Purpose: 
Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
Enables traversal of collections without needing to understand the underlying structure.

12.Adapter Pattern
Purpose: 
Allows incompatible interfaces to work together by wrapping an object with an interface that the client expects.
Facilitates integration of classes with incompatible interfaces.

13.State Pattern 
Purpose: Allows an object to alter its behavior when its internal state changes, appearing to change its class.
Reason: Promotes state-driven behavior in objects, allowing for cleaner and more maintainable code.

14.Visitor Pattern 
Purpose: 
Represents an operation to be performed on the elements of an object structure, allowing you to define a new operation without changing the classes of the elements.
Facilitates adding new operations to object structures without modifying the structures.

15.Builder Pattern 
Purpose: 
Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.
Simplifies the creation of complex objects and improves code readability and maintainability.

16.Prototype Pattern 
Purpose: 
Creates new objects by copying an existing object, known as the prototype.
Avoids the cost of creating objects the standard way (via constructors) and offers flexibility in object creation.

17.Facade Pattern 
Purpose: 
Provides a simplified interface to a complex subsystem.
Reduces the complexity of using a large number of classes by providing a single entry point.

18.Chain of responsibility Pattern 
Purpose: 
Allows passing requests along a chain of handlers where each handler can either process the request or pass it to the next handler in the chain.
Promotes the separation of concerns and decouples sender and receiver.

19.Template Method Pattern 
Purpose: 
Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.
Encourages code reuse and extension, making it easier to create variations of an algorithm.

20.Composite Pattern 
Purpose: 
Composes objects into tree structures to represent part-whole hierarchies.
Allows clients to treat individual objects and compositions uniformly.

21.Flyweight Pattern 
Purpose: 
Reduces the cost of creating and managing a large number of similar objects by sharing objects that are identical.
Optimizes memory usage by sharing common data among multiple objects.

22.Memento Pattern
Purpose: 
Captures and externalizes an object’s internal state without violating encapsulation so that the object can be restored to this state later.
Provides a way to rollback or undo changes to an object’s state.

23.Bridge Pattern
Purpose: 
Decouples an abstraction from its implementation so that the two can vary independently.
Increases flexibility and allows for the development of parallel class hierarchies without coupling them.


UI Development: Decorator, Composite, State, Factory.
Backend Development: Singleton, Factory, Chain of Responsibility, Proxy, Mediator.
Middleware/Services: Chain of Responsibility, Command, Observer.
System Design: Facade, Adapter, Bridge are frequently used in designing interfaces and APIs.
Large Scale Systems: Patterns like Flyweight, Proxy, and Memento are used to optimize memory and manage states.